#include <iostream>
using namespace std;

void fun()//普通函数被调用时，在主函数里执行到调用语句，然后程序跳转到函数位置执行，执行完函数后
{		  //再跳转到主函数中继续执行。
	cout << "普通函数" << endl;
}
inline void fun(int i);//注意：内联函数的函数原型和函数定义都要加上inline

//注意，递归不能是内联函数
inline void fun(int i)//内联函数，有点像宏，主函数里调用时，直接把内联函数的内容复制到主函数中
{		//所以比起普通函数，效率快了一些，但占用了更多空间
	cout << i << " " << "inline" << endl;
}

int main()
{
	int a = 56;
	fun(a);

	fun();//内联函数的选择上一般来讲是混合着用，看需求选择

	for (int i = 0; i < 10; i++)//函数代码少，流程直接，调用频繁，可选用内联函数
	{
		fun(a);//假如内联函数有很多语句，而主函数里调用了很多次，就会造成函数体过大
	}			//函数体过大时某些编译器就不让使用内联函数了


	return 0;
}