#include <iostream>
using namespace std;

int main()
{
	//常量的引用
	//int& a = 12;//“初始化”: 无法从“int”转换为“int &”//加上常量修饰符就好了
	const int a = 12;
	cout << a << endl;
	//a = 13;// “a”: 不能给常量赋值.//常量引用后，变量就算是常量了，不能修改


	//数组的引用
	int arr[9];//一维数组
	int(&p1)[9] = arr;//int [9](&p1) = arr;//这种写法是不合规范的，但是符合引用的顺序逻辑
	p1[3] = 26;
	p1[5] = 27;
	cout << arr[3] << ' ' << arr[5] << endl;
	
	//二维数组		//数组的类型一定要对应上，否则无法引用
	int art[5][3];	//[5][] 无法从“int [5][]”转换为“int (&)[5][3]”
	int(&p2)[5][3] = art;//[5][2] 无法从“int [5][3]”转换为“int (&)[5][2]”
	p2[3][1] = 28;//小括号优先级高，不能让p2先与后面的方括号结合
	p2[0][0] = 29;
	cout << art[3][1] << ' ' << art[0][0] << endl;


	//指针的引用
	int c = 30;
	int* c3 = &c;//一个指针装着c的地址，*c就当作c来用
	int* (&p3) = c3;//一个指针的引用，p3的地址与c3一样了，这样*p3与*c3就能当作c来用了
	//int* &p3 = c3;//可以不加括号，加了可能有红线，是提示括号多余。
	*p3 = 25;
	cout << *p3 << ' ' << *c3 << ' ' << c << endl;

	//结构体引用，就和变量引用一样的，把变量换成结构体就好了

	return 0;
}