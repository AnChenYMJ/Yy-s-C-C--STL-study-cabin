#include <stdio.h>
#include <malloc.h>

int main(void)
{
//数组
	//基本概念：根据空间分为两类：栈区数组（全局）、堆区数组
	//栈区数组，由操作系统申请，由操作系统释放，且与程序共存亡、最高默认只给1M大小
	//堆区数组：由程序员申请与释放（自己管理），malloc/free 、new/delete 申请大小理论上是内存大小，但实际有其它软件占用，要更小一些


	//动态数组：开始有个固定大小空间，而后续再有变动增大时，由逻辑来实现在尾部添加增大空间，即动态的改变空间大小。

//改 查	：下标运算[] 指针运算*(p+n)
	int a[10] = { 1, 2, 3, 4, 5, 6, 7 };	//栈区数组
	int* p1 = (int*)malloc(sizeof(int)*4);	//堆区数组	（int*）将malloc的返回值（空间首地址）强转成int*的指针
	
	if (p1)									//解决警告：C6011:取消对NULL指针"__"
	{										//因为要判断是否为空指针才能跳过警告
		p1[1] = 13;
		p1[3] = 45;

		printf("%d %d \n", p1[1], *(p1 + 3));			//p[n] == *(p+n)	这二者一样，p是空间的首地址，p+n实现地址偏移，p[n]是下标运算

		free(p1);							//一定记得释放
	}
	
	return 0;
}